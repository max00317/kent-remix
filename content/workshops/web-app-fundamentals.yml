title: Web App Fundamentals
description:
  Learn the fundamental tools for building web applications of any level of
  complexity.
meta:
  keywords:
    - web
    - react
    - remix
    - ssr
    - performance
    - seo
    - accessibility
categories:
  - web
  - react
  - remix
events:
  - title: Web App Fundamentals in London
    url: https://london.cityjsconf.org/buytickets
    quantity: 40
    date: March 30th, 2023
convertKitTag: '2568112'
problemStatements:
  part1: Building modern web applications is riddled with complexity
  part2: And that's only if you bother to deal with the problems
  part3: >-
    Tired of wiring up `onSubmit` to backend APIs and making sure your
    client-side cache stays up-to-date? Wouldn't it be cool to be able to _use_
    the global nature of CSS to your benefit, rather than find tools or
    conventions to avoid or work around it? And how would you like _nested
    layouts_ with intelligent and performance optimized data management that
    just works™?
  part4: >-
    Modern tools solve some of these problems, and completely eliminate the
    rest. With modern tools like Remix, **you don't even have to think** about
    server cache management or global CSS namespace clashes. Rather than
    creating special APIs to avoid these problems, the problems simply don't
    exist when you're using Remix. They've got you covered. Ready to build
    faster apps faster?
keyTakeaways:
  - title: Take advantage of nested routing
    description:
      Nested routing enables Remix to optimize the data you request. It also
      means each route you define can focus exclusively on itself and doesn't
      have to wrap itself in an overarching layout component which eliminates
      that boilerplate you need with other frameworks.
  - title: Write dead simple mutations
    description:
      Why re-invent mutations on the web when we've had something that works for
      ages? `<form>` works great with Remix. No wiring up `useEffect`s,
      `onSubmit`s, `useReducer`s or whatever. Remix will do all that for you,
      including the backend portion. And when the mutation is done, Remix will
      make sure the rest of the data on the page is fresh too ✨
  - title:
      Improve your site performance... As in speed, but also for search rankings
    description:
      Remix is already ridiculously fast, and it gives you a simple API into
      HTTP cache headers so you can make it even faster for pages that can be
      cached. It also gives you a great API for preloading/prefetching resources
      and pages you think the user is likely to go next. On top of this, you get
      a super simple API for data-driven `<meta>` tags which are critical for
      SEO.
  - title: Completely eliminate pending states
    description:
      Look. It's important to show you users that something's going on, and some
      of these things take time. No matter how hard you try to make your app
      fast, there's always the network that you have no control over. But we're
      going to see how easy it is to give the user an awesome experience anyway.
  - title: Handle errors
    description:
      Unfortunately, we can't get our data immediately and getting our data
      isn't always error free. But when you use Remix, your React components
      feel synchronous and error free. We'll learn the APIs Remix exposes to
      give you powerful pending states and error management.
topics:
  - Nested routing
  - Data loading and mutations
  - Styling
  - Error Handling
  - Accessibility
  - SEO optimization
prerequisite: >-
  You should have experience with [these JavaScript
  features](/blog/javascript-to-know-for-react) and attend my [React Hooks
  Workshop](/workshops/react-hooks) or have the equivalent experience. This
  workshop will use TypeScript, but should be completable if you do not have
  experience with TypeScript.
