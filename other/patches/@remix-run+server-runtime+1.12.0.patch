diff --git a/node_modules/@remix-run/server-runtime/dist/build.d.ts b/node_modules/@remix-run/server-runtime/dist/build.d.ts
index 458cfd1..d3be9ef 100644
--- a/node_modules/@remix-run/server-runtime/dist/build.d.ts
+++ b/node_modules/@remix-run/server-runtime/dist/build.d.ts
@@ -1,6 +1,7 @@
 import type { DataFunctionArgs } from "./routeModules";
 import type { AssetsManifest, EntryContext, FutureConfig } from "./entry";
 import type { ServerRouteManifest } from "./routes";
+import type { AppLoadContext } from './data'
 /**
  * The output of the compiler for the server build.
  */
@@ -18,7 +19,7 @@ export interface ServerBuild {
     };
 }
 export interface HandleDocumentRequestFunction {
-    (request: Request, responseStatusCode: number, responseHeaders: Headers, context: EntryContext): Promise<Response> | Response;
+    (request: Request, responseStatusCode: number, responseHeaders: Headers, context: EntryContext, loadContext: AppLoadContext): Promise<Response> | Response;
 }
 export interface HandleDataRequestFunction {
     (response: Response, args: DataFunctionArgs): Promise<Response> | Response;
diff --git a/node_modules/@remix-run/server-runtime/dist/server.js b/node_modules/@remix-run/server-runtime/dist/server.js
index b7a49e3..a185e6b 100644
--- a/node_modules/@remix-run/server-runtime/dist/server.js
+++ b/node_modules/@remix-run/server-runtime/dist/server.js
@@ -202,7 +202,7 @@ async function handleDocumentRequestRR(serverMode, build, staticHandler, request
   };
   let handleDocumentRequestFunction = build.entry.module.default;
   try {
-    return await handleDocumentRequestFunction(request, context.statusCode, headers$1, entryContext);
+    return await handleDocumentRequestFunction(request, context.statusCode, headers$1, entryContext, loadContext);
   } catch (error) {
     // Get a new StaticHandlerContext that contains the error at the right boundary
     context = router.getStaticContextFromError(staticHandler.dataRoutes, context, error);
@@ -226,7 +226,7 @@ async function handleDocumentRequestRR(serverMode, build, staticHandler, request
       })
     };
     try {
-      return await handleDocumentRequestFunction(request, context.statusCode, headers$1, entryContext);
+      return await handleDocumentRequestFunction(request, context.statusCode, headers$1, entryContext, loadContext);
     } catch (error) {
       return returnLastResortErrorResponse(error, serverMode);
     }
